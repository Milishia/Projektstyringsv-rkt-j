{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["addStackeholder","alert","App","className","Navbar","bg","expand","Brand","Toggle","aria-controls","Nav","Item","Link","xs","style","width","Body","Title","Text","striped","bordered","hover","Row","sm","Control","size","type","placeholder","onclick","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oXAgGA,SAASA,IACLC,MAAM,kBAGKC,MAvFf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACF,EAAA,EAAOG,MAAR,qCACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,wBAKzC,kBAAC,IAAD,KACI,kBAAC,IAAD,SAEI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,KACI,kBAACD,EAAA,EAAIE,KAAL,iCACA,kBAACF,EAAA,EAAIE,KAAL,qCACA,kBAACF,EAAA,EAAIE,KAAL,sBACA,kBAACF,EAAA,EAAIE,KAAL,wBACA,kBAACF,EAAA,EAAIE,KAAL,6BAKZ,kBAAC,IAAD,CAAKC,GAAI,GAAT,IACI,kBAAC,IAAD,CAAMC,MAAO,CAAEC,MAAO,YAClB,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAKC,MAAN,gCACA,kBAAC,IAAKC,KAAN,yFAMR,kBAAC,IAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACA,4BACI,iCACA,4CAGJ,+BACI,4BACI,iCACA,qCAEJ,4BACI,iCACA,4BACI,kBAAC,IAAKC,IAAN,KACA,kBAAC,IAAD,CAAKC,GAAI,KACL,kBAAC,IAAKC,QAAN,CAAcC,KAAK,KAAKC,KAAK,OAAOC,YAAY,8BAEpD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAASC,QAAS5B,EAAiB6B,QAAQ,mBAA3C,oBAaxB,kBAAC,IAAD,SAEI,kBAAC,IAAD,CAAQA,QAAQ,WAAhB,gCC1EAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.38404b5f.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport {Nav, NavItem, Navbar, NavDropdown} from 'react-bootstrap';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Container>\n            <Row>\n\n                <Col>{/*1 of 1*/}\n                    <Navbar bg=\"light\" expand=\"lg\">\n                        <Navbar.Brand >Projektstyringsværktøj</Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    </Navbar>\n                </Col>\n\n            </Row>\n            <Row>\n                <Col> {/*1 of 3*/}\n\n                    <Nav>\n                        <Nav.Item>\n                            <Nav.Link >Identificer Stakeholders</Nav.Link>\n                            <Nav.Link >Identificer Key Stakeholders</Nav.Link>\n                            <Nav.Link >Project Scope</Nav.Link>\n                            <Nav.Link >Risk Management</Nav.Link>\n                            <Nav.Link >Closing Checklist</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n\n                </Col>\n                <Col xs={6}> {/*2 of 3*/}\n                    <Card style={{ width: '33.6rem' }}>\n                        <Card.Body>\n                            <Card.Title>Identificer Stakeholder</Card.Title>\n                            <Card.Text>\n                                I dette afsnit skal du identificere dine Stakeholders. Hvad er en stakeholder?\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n\n                    <Table striped bordered hover>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>1</td>\n                                <td>Mark</td>\n                            </tr>\n                            <tr>\n                                <td>2</td>\n                                <td>\n                                    <Form.Row>\n                                    <Col sm={\"9\"}>\n                                        <Form.Control size=\"xs\" type=\"text\" placeholder=\"Indskriv din stakeholder\" />\n                                    </Col>\n                                    <Col>\n                                        <Button  onclick={addStackeholder} variant=\"outline-primary\">Tilføj</Button>\n                                    </Col>\n                                    </Form.Row>\n\n                                </td>\n\n                            </tr>\n\n                        </tbody>\n\n                    </Table>\n\n                </Col>\n                <Col> {/*3 of 3*/}\n\n                    <Button variant=\"primary\">Gå til næste side</Button>\n\n                </Col>\n            </Row>\n        </Container>\n\n    </div>\n  );\n}\n\nfunction addStackeholder() {\n    alert(\"button pressed\")\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}