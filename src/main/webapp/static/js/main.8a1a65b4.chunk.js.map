{"version":3,"sources":["StakeholderStore.js","StakeholderComponent.js","LoginStore.js","Login.js","KeyStakeholderComponent.js","App.js","serviceWorker.js","index.js"],"names":["StakeholderStore","stakeholders","newStakeholderName","newStakeholderEmail","addStakeHolder","postStakeholder","message","key","alert","this","getStakeholders","console","log","fetch","then","response","json","jsonresponse","stakeholdername","stakeholderemail","remoteurl","method","x","findIndexInStakeholdersArray","splice","name","email","i","length","headers","body","JSON","stringify","decorate","observable","stakeholderStore","StakeholderComponent","withRouter","observer","history","Navbar","bg","expand","alt","src","width","height","className","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","push","variant","sm","style","Body","Title","Text","striped","bordered","hover","map","stakeholder","position","zIndex","deleteStakeholder","Row","Control","value","size","type","placeholder","onChange","e","target","window","LoginStore","loginUsername","loginPassword","username","password","text","loginStore","Login","match","xs","Group","controlId","Label","getToken","deferredPrompt","prompt","KeyStakeholderComponent","stakeholderName","Prepend","Checkbox","aria-label","exact","path","component","render","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8a1a65b4.chunk.js","sourcesContent":["import {decorate, observable} from \"mobx\";\n\nexport default class StakeholderStore\n{\n    constructor()\n    {\n        this.getStakeholders();\n    }\n\n    getStakeholders()\n    {\n       // const localurl = \"http://localhost:8080/rest/stakeholder\";\n        const remoteurl = \"https://projektstyringsvaerktoej.herokuapp.com/rest/stakeholder\";\n        console.log(\"fetching\");\n        fetch(remoteurl)\n            .then((response)=> response.json()\n                .then((jsonresponse)=>{\n                    console.log(jsonresponse);\n                    this.stakeholders = jsonresponse;\n                }\n            )\n        )\n    }\n\n    deleteStakeholder(stakeholdername , stakeholderemail) {\n        const remoteurl = \"https://projektstyringsvaerktoej.herokuapp.com/rest/stakeholder/\" + stakeholdername + \"/\" + stakeholderemail;\n        console.log(\"fetching\");\n        fetch(remoteurl , {method: 'DELETE'})\n            .then(()=> {\n                    console.log(\"deleted stakeholder with name and email \" + stakeholdername + \"  and \" + stakeholderemail);\n                }\n            );\n        let x = this.findIndexInStakeholdersArray(stakeholdername , stakeholderemail);\n            this.stakeholders.splice(x, 1);\n\n    }\n\n    findIndexInStakeholdersArray(name , email)\n    {\n        for(let i = 0; this.stakeholders.length;i++)\n            {\n                if(this.stakeholders[i].name === name && this.stakeholders[i].email === email)\n                {\n                    return i;\n                }\n            }\n    }\n    postStakeholder()\n    {\n        //const localurl = \"http://localhost:8080/rest/stakeholder\";\n        const remoteurl = \"https://projektstyringsvaerktoej.herokuapp.com/rest/stakeholder\";\n        console.log(\"posting\");\n        fetch(remoteurl, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: this.newStakeholderName,\n                email: this.newStakeholderEmail,\n            })\n        })\n            .then(() => this.getStakeholders())\n    }\n\n    /*\n    stakeholders = [\n        {name: \"Daniel\" , email: \"s175207@student.dtu.dk\"},\n        {name: \"Futte\" , email: \"s175204@student.dtu.dk\"},\n        {name: \"Milishia\" , email: \"s175193@student.dtu.dk\"},\n        {name: \"Caroline\" , email: \"s175201@student.dtu.dk\"}];\n\n     */\n\n    stakeholders = [];\n\n\n\n\n    newStakeholderName = \"\";\n    newStakeholderEmail = \"\";\n    addStakeHolder = ()=> {\n        if(this.newStakeholderName !== \"\" && this.newStakeholderEmail !== \"\")\n        {\n            this.postStakeholder();\n            this.newStakeholderName=\"\";\n            this.newStakeholderEmail=\"\";\n        }\n        else\n        {\n            return \"error\";\n        }\n\n    };\n\n    message = (key)=>{\n        alert(\"this is something\"+ key);\n    }\n\n\n}\n\n\ndecorate(StakeholderStore, {\n    stakeholders: observable,\n    newStakeholderName: observable,\n    newStakeholderEmail: observable\n});\n\nexport const stakeholderStore = new StakeholderStore();","import Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport {stakeholderStore} from \"./StakeholderStore\";\nimport {withRouter} from \"react-router-dom\";//\nimport {observer} from \"mobx-react\";\n\nexport const StakeholderComponent = withRouter (observer(({history}) => {\n    return(\n    <div>\n        <Container>\n            <Row>\n\n                <Col>{/*1 of 1*/}\n                    <Navbar bg=\"light\" expand=\"lg\">\n                        <img\n                            alt=\"/web/public/dragon.png\"\n                            src=\"dragon.png\"\n                            width=\"40\"\n                            height=\"40\"\n                            className=\"d-inline-block align-top\"\n                        />\n                        <Navbar.Brand>Dragon Planner</Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                        <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link>Identificer Stakeholders</Nav.Link>\n                            <Nav.Link onClick={()=>history.push(\"/keystakeholdercomponent\")}>Identificer Key Stakeholders</Nav.Link>\n                        </Nav>\n                            <Nav className=\"mr-sm-2\">\n                                <Button variant=\"light\">Log ud</Button>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n                </Col>\n\n            </Row>\n\n            <Row>\n                <Col> {/*1 of 3*/}\n\n                </Col>\n                <Col sm=\"6\"> {/*2 of 3*/}\n                        <Card style={{ width: '33.6rem' }}>\n                            <Card.Body>\n                                <Card.Title>Identificer Stakeholders</Card.Title>\n                                <Card.Text>\n                                    I dette afsnit skal du identificere dine Stakeholders. En Stakeholder kan være en person eller organisation, der vil blive påvirket af projektet, enten negativt eller positivt.\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n\n                        <Table striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Navn på Stakeholder</th>\n                                    <th>E-mail på Stakeholder</th>\n                                    <th> </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n\n\n                            {stakeholderStore.stakeholders.map((stakeholder, key)=>\n\n                                <tr key={key}>\n                                    <td>{key+1}</td>\n                                    <td>{stakeholder.name}</td>\n                                    <td>{stakeholder.email}</td>\n                                    <td>\n                                        <Button style={{position:'relative' , zIndex:'10000000'}} variant=\"outline-danger\" onClick={()=>{stakeholderStore.deleteStakeholder(stakeholder.name , stakeholder.email)}}> x </Button>\n                                    </td>\n                                </tr>\n                            )}\n\n\n\n                            <tr>\n                                <td> </td>\n                                <td>\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Control value={stakeholderStore.newStakeholderName} size=\"xs\" type=\"text\" placeholder=\"Navn\" onChange={(e)=>stakeholderStore.newStakeholderName = e.target.value}/>\n                                        </Col>\n                                    </Form.Row>\n\n                                </td>\n                                <td>\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Control value={stakeholderStore.newStakeholderEmail} size=\"xs\" type=\"text\" placeholder=\"E-mail\" onChange={(e)=>stakeholderStore.newStakeholderEmail = e.target.value}/>\n                                        </Col>\n\n\n                                    </Form.Row>\n\n\n                                </td>\n                                <td>\n                                    <Button variant=\"outline-success\" onClick={()=>{\n                                        console.log(stakeholderStore.newStakeholderEmail)\n                                        console.log(stakeholderStore.newStakeholderName)\n                                        if(stakeholderStore.addStakeHolder() === \"error\")\n                                        {\n                                            window.alert(\"Name and Email can't be empty\");\n                                        }\n                                    }}>Tilføj</Button>\n                                </td>\n\n\n                            </tr>\n\n                            </tbody>\n                        </Table>\n                </Col>\n                <Col> {/*3 of 3*/}\n\n                    <Button variant=\"info\" onClick={()=>history.push(\"/keystakeholdercomponent\")}>Gå til næste side</Button>\n\n                </Col>\n            </Row>\n        </Container>\n\n    </div>\n    )\n}));\n\nexport default observer(StakeholderComponent)","import {decorate, observable} from \"mobx\";\n\nexport default class LoginStore\n{\n    loginUsername = \"\";\n    loginPassword = \"\";\n    getToken()\n    {\n        const url = \"https://projektstyringsvaerktoej.herokuapp.com/rest/login\";\n        console.log(\"Acquiring token\");\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: this.loginUsername,\n                password: this.loginPassword,\n            })\n        }).then((response)=> response.text()\n            .then((text)=>{\n                    console.log(text);\n                }\n            )\n        )\n    }\n}\ndecorate(LoginStore, {\n    loginUsername: observable,\n    loginPassword: observable\n});\nexport const loginStore = new LoginStore();","import Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { Navbar} from \"react-bootstrap\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport {observer} from \"mobx-react\";\nimport {loginStore} from \"./LoginStore\";\nimport \"./index\";\n\nexport const Login = withRouter(observer(({history, match}) => {\n    return(\n        <div className=\"login\">\n            <Container>\n                <Row>\n\n                    <Col>\n                        <Navbar bg=\"light\" expand=\"lg\">\n                            <img\n                                alt=\"/web/public/dragon.png\"\n                                src=\"dragon.png\"\n                                width=\"40\"\n                                height=\"40\"\n                                className=\"d-inline-block align-top\"\n                            />\n                            <Navbar.Brand>Dragon Planner - Login</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                        </Navbar>\n                    </Col>\n\n                </Row>\n                <Row>\n                    <Col>{/*1 of 3*/}\n\n                    </Col>\n                    <Col xs={6}>{/*2 of 3*/}\n                        <Form>\n                            <Form.Group controlId=\"formBasicEmail\">\n                                <Form.Label>Email address</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" value={loginStore.loginUsername} onChange={(e)=>{\n                                    loginStore.loginUsername = e.target.value\n                                    console.log(loginStore.loginUsername)}} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" value={loginStore.loginPassword} onChange={(e)=>{\n                                    loginStore.loginPassword = e.target.value\n                                    console.log(loginStore.loginPassword)\n                                }}/>\n                            </Form.Group>\n                            <Button variant=\"primary\" type=\"submit\" onClick={()=>{\n                                loginStore.getToken();\n                                history.push(\"/stakeholdercomponent\")\n\n                            }}>\n                                Submit\n                            </Button>\n                            <Button onClick={()=>{window.deferredPrompt.prompt();}}>Installér som Native App</Button>\n                        </Form>\n                    </Col>\n                    <Col>{/*3 of 3*/}\n\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}));\n\nexport default observer(Login)","import Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport {stakeholderStore} from \"./StakeholderStore\";\nimport {withRouter} from \"react-router-dom\";\nimport {observer} from \"mobx-react\";\nimport InputGroup from \"react-bootstrap/InputGroup\"\n\n\nconst KeyStakeholderComponent = withRouter(observer(({history}) => {\n    return(\n        <div>\n            <Container>\n                <Row>\n                    <Col>{/*1 of 1*/}\n                        <Navbar bg=\"light\" expand=\"lg\">\n                            <img\n                                alt=\"/web/public/dragon.png\"\n                                src=\"dragon.png\"\n                                width=\"40\"\n                                height=\"40\"\n                                className=\"d-inline-block align-top\"\n                            />\n                            <Navbar.Brand >Dragon Planner</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                                <Nav className=\"mr-auto\">\n                                    <Nav.Link onClick={()=>history.push(\"/stakeholdercomponent\")}>Identificer Stakeholders</Nav.Link>\n                                    <Nav.Link >Identificer Key Stakeholders</Nav.Link>\n                                </Nav>\n                                <Nav className=\"mr-sm-2\">\n                                    <Button variant=\"light\">Log ud</Button>\n                                </Nav>\n                            </Navbar.Collapse>\n                        </Navbar>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col> {/*1 of 3*/}\n\n                    </Col>\n                    <Col sm=\"6\"> {/*2 of 3*/}\n                            <Card style={{ width: '33.6rem' }}>\n                                <Card.Body>\n                                    <Card.Title>Identificer Key stakeholders</Card.Title>\n                                    <Card.Text>\n                                        I dette afsnit skal du identificere dine Keystakeholders ud fra D.A.N.C.E metoden.\n                                        Hvad er D.A.N.C.E? <br /><br />\n                                        <b>DECISIONS:</b> <br />\n                                        Tager beslutninger der kan har indflydelse på projektets budget.<br /><br />\n\n                                        <b>AUTHORITY:</b> <br />\n                                        Have the authority to grant permission to proceed with the project.<br /><br />\n\n                                        <b>NEED:</b> <br />\n                                        Directly benefit from or are impacted by the project and consequently need to know all about it.<br /><br />\n\n                                        <b>CONNECTIONS:</b> <br />\n                                        Are connected to the people, money, or resources required to remove roadblocks or exert influence to ensure project success. These are the champions, the active supporters who will ensure your project's success.<br /><br />\n\n                                        <b>ENERGY:</b> <br />\n                                        Have positive or negative energy that could affect project success\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                            <Table striped bordered hover>\n                                <thead>\n                                <tr>\n                                    <td>#</td>\n                                    <th>Navn på Stakeholder</th>\n                                    <th>D</th>\n                                    <th>A</th>\n                                    <th>N</th>\n                                    <th>C</th>\n                                    <th>E</th>\n\n                                </tr>\n                                </thead>\n                                <tr>\n\n                                        {stakeholderStore.stakeholders.map((stakeholderName, key)=>\n                                            <tr key={key}><td>{key+1}</td></tr>)}\n\n                                    <th>\n                                        {/*  {stakeholderStore.stakeholders.map((stakeholderName, key)=>\n                                            <tr><td>{stakeholderName.name}</td></tr>)}*/}\n                                    </th>\n                                    <th>\n                                        <label>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\n                                            </InputGroup.Prepend>\n                                        </label>\n                                    </th>\n                                    <th>\n                                        <label>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\n                                            </InputGroup.Prepend>\n                                        </label>\n                                    </th>\n                                    <th>\n                                        <label>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\n                                            </InputGroup.Prepend>\n                                        </label>\n                                    </th>\n                                    <th>\n                                        <label>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\n                                            </InputGroup.Prepend>\n                                        </label>\n                                    </th>\n                                    <th>\n                                        <label>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" />\n                                            </InputGroup.Prepend>\n                                        </label>\n                                    </th>\n                                </tr>\n                            </Table>\n                    </Col>\n                    <Col>\n                        <Button variant=\"info\">Færdig</Button>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}));\n\nexport default observer(KeyStakeholderComponent)","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport { Route } from \"react-router-dom\";\nimport StakeholderComponent from \"./StakeholderComponent\";\nimport Login from \"./Login\";\nimport KeyStakeholderComponent from \"./KeyStakeholderComponent\";\nimport { Switch } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Switch>\n            <Route exact path = \"/\" component={Login}/>\n            <Route path = \"/stakeholdercomponent\" component={StakeholderComponent}/>\n            <Route path = \"/keystakeholdercomponent\" component={KeyStakeholderComponent}/>\n            <Route render={() => <h1> Display 404 page here </h1>} />\n        </Switch>\n    )\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\"\n\nReactDOM.render(<BrowserRouter><App/></BrowserRouter>, document.getElementById('root'));\n\n/*window.addEventListener('beforeinstallprompt', (e) => {\n    // Stash the event so it can be triggered later.\n    console.log(\"Got beforeinstallprompt\");\n    window.deferredPrompt = e;\n});*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register();\n"],"sourceRoot":""}