{"version":3,"sources":["StakeholderStore.js","StakeholderComponent.js","Login.js","KeyStakeholderComponent.js","App.js","serviceWorker.js","index.js"],"names":["StakeholderStore","stakeholders","newStakeholderName","newStakeholderEmail","addStakeHolder","postStakeholder","message","key","alert","this","getStakeholders","console","log","fetch","then","response","json","jsonresponse","method","headers","body","JSON","stringify","name","email","e","decorate","observable","stakeholderStore","StakeholderComponent","withRouter","observer","history","className","Navbar","bg","expand","Brand","Toggle","aria-controls","Nav","Item","Link","xs","style","width","Body","Title","Text","striped","bordered","hover","map","stakeholderName","Row","sm","Control","value","size","type","placeholder","onChange","target","variant","onClick","push","Login","match","Group","controlId","Label","KeyStakeholderComponent","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8c193fc.chunk.js","sourcesContent":["import {decorate, observable} from \"mobx\";\r\n\r\nexport default class StakeholderStore\r\n{\r\n    constructor()\r\n    {\r\n        this.getStakeholders();\r\n    }\r\n\r\n    getStakeholders()\r\n    {\r\n        const localurl = \"http://localhost:8080/rest/stakeholder\";\r\n        const remoteurl = \"https://projektstyringsvaerktoej.herokuapp.com/rest/stakeholder\";\r\n        console.log(\"fetching\");\r\n        fetch(remoteurl)\r\n            .then((response)=> response.json()\r\n                .then((jsonresponse)=>{\r\n                    console.log(jsonresponse);\r\n                    this.stakeholders = jsonresponse;\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    postStakeholder()\r\n    {\r\n        const localurl = \"http://localhost:8080/rest/stakeholder\";\r\n        const remoteurl = \"https://projektstyringsvaerktoej.herokuapp.com/rest/stakeholder\";\r\n        console.log(\"posting\");\r\n        fetch(remoteurl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                name: this.newStakeholderName,\r\n                email: this.newStakeholderEmail,\r\n            })\r\n        })\r\n            .then(() => this.getStakeholders())\r\n    }\r\n\r\n    /*\r\n    stakeholders = [\r\n        {name: \"Daniel\" , email: \"s175207@student.dtu.dk\"},\r\n        {name: \"Futte\" , email: \"s175204@student.dtu.dk\"},\r\n        {name: \"Milishia\" , email: \"s175193@student.dtu.dk\"},\r\n        {name: \"Caroline\" , email: \"s175201@student.dtu.dk\"}];\r\n\r\n     */\r\n\r\n    stakeholders = [];\r\n\r\n\r\n\r\n\r\n    newStakeholderName = \"\";\r\n    newStakeholderEmail = \"\";\r\n    addStakeHolder = ()=> {\r\n\r\n        this.postStakeholder();\r\n        this.newStakeholderName=\"\";\r\n        this.newStakeholderEmail=\"\";\r\n    };\r\n    removeStakeholder(e) {\r\n\r\n    }\r\n    message = (key)=>{\r\n        alert(\"this is something\"+ key);\r\n    }\r\n\r\n\r\n}\r\n\r\ndecorate(StakeholderStore, {\r\n    stakeholders: observable,\r\n    newStakeholderName: observable,\r\n    newStakeholderEmail: observable\r\n});\r\n\r\nexport const stakeholderStore = new StakeholderStore();","import Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport React from \"react\";\r\nimport {stakeholderStore} from \"./StakeholderStore\";\r\nimport {withRouter} from \"react-router-dom\";//\r\nimport {observer} from \"mobx-react\";\r\n\r\nexport const StakeholderComponent = withRouter (observer(({history}) => {\r\n    return(\r\n    <div className=\"App\">\r\n        <Container>\r\n            <Row>\r\n\r\n                <Col>{/*1 of 1*/}\r\n                    <Navbar bg=\"light\" expand=\"lg\">\r\n                        <Navbar.Brand >Projektstyringsværktøj</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    </Navbar>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col> {/*1 of 3*/}\r\n\r\n                    <Nav>\r\n                        <Nav.Item>\r\n                            <Nav.Link >Identificer Stakeholders</Nav.Link>\r\n                            <Nav.Link >Identificer Key Stakeholders</Nav.Link>\r\n                            <Nav.Link >Project Scope Statement</Nav.Link>\r\n                            <Nav.Link >Identificer arbejdsopgaver</Nav.Link>\r\n                            <Nav.Link >Identificer risici</Nav.Link>\r\n                            <Nav.Link >Vurder risici</Nav.Link>\r\n                            <Nav.Link >Imødekom risici</Nav.Link>\r\n                            <Nav.Link >Closing Checklist</Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n\r\n                </Col>\r\n                <Col xs={6}> {/*2 of 3*/}\r\n                    <Card style={{ width: '33.6rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>Identificer Stakeholder</Card.Title>\r\n                            <Card.Text>\r\n                                I dette afsnit skal du identificere dine Stakeholders. En Stakeholder kan være en person eller organisation, der bliver vil blive påvirket af projektet, enten negativt eller positivt.\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Navn på Stakeholder</th>\r\n                            <th>E-mail på Stakeholder</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                        {stakeholderStore.stakeholders.map((stakeholderName, key)=>\r\n                            <tr key={key}><td>{key+1}</td><td>{stakeholderName.name}</td><td>{stakeholderName.email}</td></tr>)}\r\n\r\n\r\n\r\n                        <tr>\r\n                            <td> </td>\r\n                            <td>\r\n                                <Form.Row>\r\n                                    <Col sm={\"9\"}>\r\n                                        <Form.Control value={stakeholderStore.newStakeholderName} size=\"xs\" type=\"text\" placeholder=\"Indskriv navn\" onChange={(e)=>stakeholderStore.newStakeholderName = e.target.value}/>\r\n                                    </Col>\r\n\r\n                                </Form.Row>\r\n\r\n                            </td>\r\n                            <td>\r\n                                <Form.Row>\r\n                                    <Col sm={\"9\"}>\r\n                                        <Form.Control value={stakeholderStore.newStakeholderEmail} size=\"xs\" type=\"text\" placeholder=\"Indskriv E-mail\" onChange={(e)=>stakeholderStore.newStakeholderEmail = e.target.value}/>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Button variant=\"outline-primary\" onClick={()=>{\r\n                                            stakeholderStore.addStakeHolder();\r\n                                        }}>Tilføj</Button>\r\n                                    </Col>\r\n\r\n                                </Form.Row>\r\n\r\n\r\n                            </td>\r\n\r\n\r\n                        </tr>\r\n\r\n                        </tbody>\r\n\r\n                    </Table>\r\n\r\n                </Col>\r\n                <Col> {/*3 of 3*/}\r\n\r\n                    <Button variant=\"primary\" onClick={()=>history.push(\"/keystakeholdercomponent\")}>Gå til næste side</Button>\r\n\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n\r\n    </div>\r\n    )\r\n}));\r\n\r\nexport default observer(StakeholderComponent)","import Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { Navbar} from \"react-bootstrap\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport React from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react\";\r\n\r\n\r\nconst Login = withRouter(({history, match}) => {\r\n    return(\r\n        <div className=\"login\">\r\n            <Container>\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <Navbar bg=\"light\" expand=\"lg\">\r\n                            <Navbar.Brand >Login</Navbar.Brand>\r\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        </Navbar>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col>{/*1 of 3*/}\r\n\r\n                    </Col>\r\n                    <Col xs={6}>{/*2 of 3*/}\r\n                        <Form>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Label>Email address</Form.Label>\r\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"formBasicPassword\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\" onClick={()=>history.push(\"/stakeholdercomponent\")}>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col>{/*3 of 3*/}\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default observer(Login)","import {withRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nconst KeyStakeholderComponent = withRouter(observer(({history, match}) => {\r\n    return(\r\n        <div>\r\n            <h2> Key Stakeholder page</h2>\r\n\r\n        </div>\r\n    )\r\n}));\r\n\r\nexport default observer(KeyStakeholderComponent)","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport {observer} from \"mobx-react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport StakeholderComponent from \"./StakeholderComponent\";\r\nimport Login from \"./Login\";\r\nimport KeyStakeholderComponent from \"./KeyStakeholderComponent\";\r\nimport { Switch } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Switch>\r\n            <Route path = {\"/stakeholdercomponent\"} component={StakeholderComponent}/>\r\n            <Route path = {\"/keystakeholdercomponent\"} component={KeyStakeholderComponent}/>\r\n            <Route exact path = \"/\" component={Login}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\"\r\n\r\nReactDOM.render(<BrowserRouter><App/></BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}